
// Arithmetic Operators

Add: +
Subtract: -
Multiply: *
Divide: /
Remainder: %

// Properties

console.log('Hello'.length); // Prints 5

// Methods

console.log('hello'.toUpperCase()); // Prints 'HELLO'
console.log('Hey'.startsWith('H')); // Prints true

// Built-in Objects

console.log(Math.random()); // Prints a random number between 0 and 1
console.log(Math.floor(Math.random() * 50)); // Prints a random whole number between 0 and 50
Math.random() * 50; // To generate a random number between 0 and 50, we could multiply this result by 50
Math.floor(Math.random() * 50); // Takes a decimal number, and rounds down to the nearest whole number.

// Variable

var myName = 'Arya';
console.log(myName);

var is used in pre-ES6 versions of JavaScript. It is function scoped.
let is the preferred way to declare a variable when it can be reassigned. It is block scoped.
const is the preferred way to declare a variable with a constant value. It is also block scoped.

let newVariable; // Output undefined

let w = 4;
w += 1; // Can be written as w = w + 1

let x = 20;
x -= 5; // Can be written as x = x - 5
console.log(x); // Output: 15

let y = 50;
y *= 2; // Can be written as y = y * 2
console.log(y); // Output: 100

let z = 8;
z /= 2; // Can be written as z = z / 2
console.log(z); // Output: 4

// Increment and Decrement Operator

let a = 10;
a++;
console.log(a); // Output: 11

let b = 20;
b--;
console.log(b); // Output: 19

// String Concatenation with Variables

let myPet = 'armadillo';
console.log('I own a pet ' + myPet + '.'); // Output: 'I own a pet armadillo.'

// String Interpolation

const myPet = 'armadillo';
console.log(`I own a pet ${myPet}.`);
// Output: I own a pet armadillo.

// typeof operator

const unknown1 = 'foo';
console.log(typeof unknown1); // Output: string

const unknown2 = 10;
console.log(typeof unknown2); // Output: number

const unknown3 = true; 
console.log(typeof unknown3); // Output: boolean

let newVariable = 'Playing around with typeof.';
console.log(typeof newVariable); // Output: string
newVariable = 1;
console.log(typeof newVariable); // Output: number

// If...Else Statements

if (false) {
  console.log('The code in this block will not run.');
} else {
  console.log('But the code in this block will!');
}

// Comparison Operators

Less than: <
Greater than: >
Less than or equal to: <=
Greater than or equal to: >=
Is equal to: ===
Is not equal to: !==

10 < 12 // Evaluates to true
'apples' === 'oranges' // false

let hungerLevel = 3;
if (hungerLevel > 7) {
  console.log('Time to eat!');
} else {
  console.log('We can eat later!');
}

// Logical Operators

the 'and' operator (&&)
the 'or' operator (||)
the 'not' operator, otherwise known as the bang operator (!)

if (stopLight === 'green' && pedestrians === 0) {
  console.log('Go!');
} else {
  console.log('Stop');
}

let excited = true;
console.log(!excited); // Prints false
let sleepy = false;
console.log(!sleepy); // Prints true

// Truthy and Falsy

Falsy Values
0
Empty strings like "" or ''
null which represent when there is no value at all
undefined which represent when a declared variable lacks a value
NaN, or Not a Number

let myVariable = 'I Exist!';
if (myVariable) {
   console.log(myVariable)
} else {
   console.log('The variable does not exist.')
} // check to see if the variable has been assigned a value.

let numberOfApples = 0;
if (numberOfApples){
   console.log('Let us eat apples!');
} else {
   console.log('No apples left!');
} // Prints 'No apples left!'

// Truthy and Falsy Assignment

let username = '';
let defaultName;
if (username) { // Si username existe (truth), entonces
  defaultName = username;
} else { // Si username no existe, entonces
  defaultName = 'Stranger';
}
console.log(defaultName); // Prints: Stranger

let username = ''; // Como reducir lo anterior (short-circuit evaluation)
let defaultName = username || 'Stranger';
console.log(defaultName); // Prints: Stranger

let tool = 'marker'; // Si es un string vacÃ­o, regresara el valor 'pen'.
let writingUtensil = tool || 'pen';
console.log(`The ${writingUtensil} is mightier than the sword.`);

// Ternary Operator

let isNightTime = true;
if (isNightTime) {
  console.log('Turn on the lights!');
} else {
  console.log('Turn off the lights!');
}

let isNightTime = true;
isNightTime ? console.log('Turn on the lights!') : console.log('Turn off the lights!');

let favoritePhrase = 'Love That!';
favoritePhrase === 'Love That!' ? console.log('I love that!') : console.log("I don't love that!");

// Else If Statements

let stopLight = 'yellow';
if (stopLight === 'red') {
  console.log('Stop!');
} else if (stopLight === 'yellow') {
  console.log('Slow down.');
} else if (stopLight === 'green') {
  console.log('Go!');
} else {
  console.log('Caution, unknown!');
}

// The switch keyword

let groceryItem = 'papaya';
switch (groceryItem) {
  case 'tomato':
    console.log('Tomatoes are $0.49');
    break;
  case 'lime':
    console.log('Limes are $1.49');
    break;
  case 'papaya':
    console.log('Papayas are $1.29');
    break;
  default:
    console.log('Invalid item');
    break;
} // Prints 'Papayas are $1.29'

// Function Declarations and Calling

function greetInSpanish() {
  console.log('Buenas tardes');
}

greetInSpanish();

// Parameters and Arguments (Functions)

function sayThanks(name) {
  console.log('Thank you for your purchase '+ name + '! We appreciate your business.');
}

sayThanks('Cole');

// Default Parameters (Functions)

function greeting (name = 'stranger') {
  console.log(`Hello, ${name}!`)
}
greeting('Nick') // Output: Hello, Nick!
greeting() // Output: Hello, stranger!

// Return (Functions)

function monitorCount(rows, columns) {
  return rows * columns;
}

const numOfMonitors = monitorCount(5,4);

console.log(numOfMonitors);

// Helper Functions (the return value of a function inside another function.)

function monitorCount(rows, columns) {
  return rows * columns;
};

function costOfMonitors(rows, columns) {
  return monitorCount(rows, columns) * 200;
};

const totalCost = costOfMonitors(5,4);

console.log(totalCost);

// Function Expressions (A function expression is often stored in a variable in order to refer to it.)

const plantNeedsWater = function(day) {
  if (day === 'Wednesday') {
    return true;
  } else {
    return false;
  }
};

plantNeedsWater('Tuesday');

console.log(plantNeedsWater('Wednesday'));

// Arrow Functions

const plantNeedsWater = function(day) // Se reescribe como
const plantNeedsWater = (day) =>
{
  if (day === 'Wednesday') {
    return true;
  } else {
    return false;
  }
};

// Concise Body Arrow Functions

const functionName = () => {}; // Zero Parameters
const functionName = paramOne => {} // One Parameter
const functionName = (paramOne, paramTwo) => {} // Two or more Parameters

| const squareNum = (num) => {
|   return num * num;
| };
| // Function refactor
| const squareNum = num => num * num;


// Arrays

let newYearsResolutions = ['Keep a journal', 'Take a falconry class', 'Learn to juggle'];

let cities = ['New York', 'Berlin', 'Dubai'];
cities[0] // Accessing Elements

let groceryList = ['bread', 'tomatoes', 'milk'];
groceryList[1] = 'avocados'; // Update Elements

const objectives = ['Learn', 'Read', 'Run'];
console.log(objectives.length); // Number Of Items

const itemTracker = ['item 0', 'item 1', 'item 2'];
itemTracker.push('item 3', 'item 4'); // Add Items

const newItemTracker = ['item 0', 'item 1', 'item 2'];
const removed = newItemTracker.pop(); // Remove Last Item

const groceryList = ['juice', 'bananas', 'pasta'];
groceryList.shift(); // Remove First Item

const groceryList = ['juice', 'bananas', 'pasta'];
groceryList.unshift('popcorn'); // Add First Item

const groceryList = ['juice', 'bananas', 'pasta'];
groceryList.slice('1,2'); // Copy Items 'bananas', 'pasta'

const groceryList = ['juice', 'bananas', 'pasta'];
groceryList.indexOf('bananas'); // Find Item Index [1]

const groceryList = ['yo', 'quiero', 'pasta'];
groceryList.join(' '); // Output 'Yo quiero pasta'

Arrays can be declared with let or const. Arrays are mutable. A variable declared with const cannot be reassigned.

// Arrays and Functions

const flowers = ['peony', 'daffodil', 'marigold'];
function addFlower(arr) {
  arr.push('lily');
}
addFlower(flowers);
console.log(flowers); // Output: ['peony', 'daffodil', 'marigold', 'lily']

// Nested Arrays

const nestedArr = [[1], [2, 3]];

const nestedArr = [[1], [2, 3]];
console.log(nestedArr[1]); // Output: [2, 3]

const nestedArr = [[1], [2, 3]];
console.log(nestedArr[1]); // Output: [2, 3]
console.log(nestedArr[1][0]); // Output: 2

// Loops

for (let counter = 0; counter < 4; counter++){
  console.log(counter);
} // Output 0, 1, 2, 3.

for (let counter = 3; counter >= 0; counter--){
  console.log(counter);
} // Loop backwards. Output 3, 2, 1, 0.

for (let counter = 0; counter <= 10; counter++) {
  if (counter % 2 === 0)
  console.log(counter); // Prints all the even numbers from 0 to 10
}

// Looping through Arrays

const vacationSpots = ['Bali', 'Paris', 'Tulum'];

for (let i = 0; i < vacationSpots.length; i++) {
  console.log('I would love to visit ' + vacationSpots[i]);
} // Output (3 times): 'I would love to visit (each array item)'

// Nested Loops

const bobsFollowers = ['Pete', 'Pat', 'Pit', 'Pot'];
const tinasFollowers = ['Harry', 'Pit', 'Pot'];
const mutualFollowers = [];

for (let i = 0; i < bobsFollowers.length; i++) {
  for (let j = 0; j < tinasFollowers.length; j++) {
    if (bobsFollowers[i] === tinasFollowers[j]) {
      mutualFollowers.push(bobsFollowers[i]);
    }
  }
} // Compare the elements in two arrays

console.log(mutualFollowers); // Output 'pit', 'pot'

//  While Loops

let counterTwo = 1;
while (counterTwo < 4) {
  console.log(counterTwo);
  counterTwo++;
  } // Prints 1, 2, and 3

const cards = ['diamond', 'spade', 'heart', 'club'];
let currentCard;
while (currentCard !== 'spade') {
  currentCard = cards[Math.floor(Math.random() * 4)];
  console.log(currentCard);
} // Logs card item until 'spades' matches

// Do...While Statements

const cupsOfSugarNeeded = 3;
let cupsAdded = 0;
do {
  cupsAdded++;
  console.log(cupsAdded); // Number of cups added until the while condition is met
  } while (cupsAdded < cupsOfSugarNeeded);


// The break Keyword

const rapperArray = ["Lil' Kim", "Jay-Z", "Notorious B.I.G.", "Tupac"];
for (let i = 0; i < rapperArray.length; i++) {
  console.log(rapperArray[i]);
  if (rapperArray[i] === "Notorious B.I.G.") {
    break;
  }
}; // Stops when the if condition is met
console.log("And if you don't know, now you know.");

// The for...of Loop

const hobbies = ['singing', 'eating', 'quidditch', 'writing'];
for (const hobby of hobbies) {
  console.log(`I enjoy ${hobby}.`);
} // Output "I enjoy (item)" three times

const username = 'joe';
for (const char of username) {
  console.log(char); 
} // Output j, o, e.

const strangeBirds = ['Shoebill', 'Cockatrice', 'Basan', 'Terrorbird','Parotia','Kakapo'];
for (const bird of strangeBirds) {
  if (bird === 'Basan'){ 
    break; 
  }
  console.log(bird);
} // Stops at 'Basan' and prints Shoebill, Cockatrice

const strangeBirds = ['Shoebill', 'Cockatrice', 'Basan', 'Cow', 'Terrorbird', 'Parotia', 'Kakapo'];
for (const bird of strangeBirds) {
  if  (bird === 'Cow'){
    continue;
  }
  console.log(bird);
} // List all items except 'Cow'

// Object Literals

let spaceship = {
  'Fuel Type': 'diesel', // quotation marks because it contains a space character.
  color: 'silver'
}; // Properties. Key: Value. 

// Object Accessing Properties

let spaceship = {
  homePlanet: 'Earth',
  numCrew: 5,
  flightPath: ['Venus', 'Mars', 'Saturn']
};
let crewCount = spaceship.numCrew;
let planetArray = spaceship.flightPath;

// Objects Bracket Notation

let spaceship = {
  'Fuel Type' : 'Turbo Fuel',
  'Active Mission' : true,
  homePlanet : 'Earth',
  numCrew: 5
 };
let propName =  'Active Mission';
let isActive = spaceship['Active Mission'];
console.log(spaceship[propName]); // Return true

// Objects Property Assignment

let spaceship = {
  color: 'silver',
  'Secret Mission' : 'Discover life outside of Earth.'
};
spaceship.color = 'glorious gold'; // Changes Property Value
spaceship.numEngines = 2; // Add New Propertie
delete spaceship['Secret Mission']; // Delete Propertie

// Object Methods

let retreatMessage = 'We no longer wish to conquer your planet. It is full of dogs, which we do not care for.';
const alienShip = {
  retreat () { // Object Method
    console.log(retreatMessage);
  },
  takeOff () { // Object Method
    console.log('Spim... Borp... Glix... Blastoff!');
  }
};
alienShip.retreat(); // Prints retreatMessage String
alienShip.takeOff(); // Prints takeOff Method String

// Nested Objects

let spaceship = {
  passengers: null,
  crew: {
    captain: { 
      name: 'Sandra', 
      degree: 'Computer Engineering', 
      encourageTeam() { console.log('We got this!') },
     'favorite foods': ['cookies', 'cakes', 'candy', 'spinach'] }
  },
}; 

let capFave = spaceship.crew.captain['favorite foods'][0]; // Select 'cookies' from Captain 'favorite foods'
spaceship.passengers = [{name: 'Perro del Espacio', speciality: 'Mofles'}]; // Add passenger object to passengers property
const firstPassenger = spaceship.passengers[0]; // Select first object in the passengers Propertie

// Objects Pass By Reference

let spaceship = {
  'Fuel Type' : 'Turbo Fuel',
  homePlanet : 'Earth'
};
let greenEnergy = objectParam => {
  objectParam['Fuel Type'] = 'avocado oil';
} // Changes 'Fuel Type'
let remotelyDisable = objectParam => {
  objectParam.disabled = true;
} // Adds/Change Propertie

greenEnergy(spaceship) // Modifies Propertie from Object
remotelyDisable(spaceship); // Modifies Propertie from Object

console.log(spaceship); // Returns Object with changes

// Looping Through Objects

let spaceship = {
    crew: {
    captain: { 
        name: 'Lily', 
        degree: 'Computer Engineering', 
        cheerTeam() { console.log('You got this!') } 
        },
    'chief officer': { 
        name: 'Dan', 
        degree: 'Aerospace Engineering', 
        agree() { console.log('I agree, captain!') } 
        },
    medic: { 
        name: 'Clementine', 
        degree: 'Physics', 
        announce() { console.log(`Jets on!`) } },
    translator: {
        name: 'Shauna', 
        degree: 'Conservation Science', 
        powerFuel() { console.log('The tank is full!') } 
        }
    }
}; 
for (let crewMember in spaceship.crew) {
  console.log(`${crewMember} : ${spaceship.crew[crewMember].name}`);

} // Returns list with crew title and name for each item
for (let crewMember in spaceship.crew) {
  console.log(`${spaceship.crew[crewMember].name} : ${spaceship.crew[crewMember].degree}`);
} Returns list with crew name and degree for each item

// Objects this Keyword

const goat = {
  dietType: 'herbivore',
  makeSound() {
    console.log('baaa');
  },
  diet() {
    console.log(this.dietType);
    console.log(dietType); // Returns ReferenceError
  }
};
goat.diet(); // Output: herbivore

// Objects Getters

const person = {
  _firstName: 'John',
  _lastName: 'Doe',
  get fullName() { // Getter
    if (this._firstName && this._lastName){
      return `${this._firstName} ${this._lastName}`;
    } else {
      return 'Missing a first name or a last name.';
    }
  }
}
person.fullName; // 'John Doe'

// Objects Setters

const robot = {
  _numOfSensors: 15,
  get numOfSensors(){
    if(typeof this._numOfSensors === 'number'){
      return this._numOfSensors;
    } else {
      return 'Sensors are currently down.';
    }
  },
  set numOfSensors(num) {
    if (typeof num === 'number' && num >= 0) {
      this._numOfSensors = num;
    } else {
      return 'Pass in a number that is greater than or equal to 0';
    }
  }
};

robot.numOfSensors = 100; // Assign _numOfSensors to 100
console.log(robot.numOfSensors); // Prints 100

// Objects Factory Functions

const robotFactory = (model, mobile) => {
  return {
    model: model,
    mobile: mobile,
    beep () {
      console.log('Beep Boop');
    }
  }
};
const tinCan = robotFactory('P-500', true); // New Object Created
console.log(tinCan.model); // Prints 'P-500'
tinCan.beep(); // Prints 'Beep Boop'

// Objects Property Value Shorthand

const monsterFactory = (name, age) => {
  return { 
    name: name,
    age: age
  }
};

const monsterFactory = (name, age) => {
  return { 
    name,
    age   
  }
};

// Objects Destructured Assignment

const vampire = {
  name: 'Dracula',
  residence: 'Transylvania',
  preferences: {
    day: 'stay inside',
    night: 'satisfy appetite'
  }
};
const residence = vampire.residence; // Extract the residence property as a variable
console.log(residence); // Prints 'Transylvania'
const { residence } = vampire; // Destructured assignment
console.log(residence); // Prints 'Transylvania'

// Built-in Object Methods

const robot = {
	model: 'SAL-1000',
  mobile: true,
  sentient: false,  
  armor: 'Steel-plated',
  energyLevel: 75
};
const robotKeys = Object.keys(robot); // Returns an array with the values of robot
console.log(robotKeys);
const robotEntries = Object.entries(robot); // Returns an array with the values and keys of robot
console.log(robotEntries);
const newRobot = Object.assign({laserBlaster: true, voiceRecognition: true}, robot);
console.log(newRobot); // Creates a new object from another object and adds new properties

// Higher-Order Functions Functions as Data

const checkThatTwoPlusTwoEqualsFourAMillionTimes = () => {
  for(let i = 1; i <= 1000000; i++) {
    if ( (2 + 2) != 4) {
      console.log('Something has gone very wrong :( ');
    }
  }
};
const isTwoPlusTwo = checkThatTwoPlusTwoEqualsFourAMillionTimes; // Creates alias
isTwoPlusTwo(); // Call original function using alias
console.log(isTwoPlusTwo.name); // Prints original name

// Higher-Order Functions - Functions as Parameters

const higherOrderFunc = param => {
  param();
  return `I just invoked ${param.name} as a callback function!`
}
const anotherFunc = () => {
  return 'I\'m being invoked by the higher-order function!';
}
higherOrderFunc(anotherFunc);

// Iterators, the .forEach() Method

const fruits = ['mango', 'papaya', 'pineapple', 'apple'];
fruits.forEach(fruit => { 
  console.log('I want to eat a ' + fruit); // Prints 'I want to eat' on all items
}); // arrow function
fruits.forEach(function(fruit) { // Also prints the string on all items
  console.log(`Yo quiero un ${fruit}`);
}); // function expression

// Iterators, the .map() Method

const animals = ['Hen', 'elephant', 'llama', 'leopard', 'ostrich', 'Whale', 'octopus', 'rabbit', 'lion', 'dog'];
const secretMessage = animals.map(i => {
  return i[0];
})
console.log(secretMessage.join('')); // Prints new array 'HelloWorld'

const bigNumbers = [100, 200, 300, 400, 500];
const smallNumbers = bigNumbers.map(i => {
  return i/100;
});
console.log(smallNumbers); // Returns new Array [1,2,3,4,5]

// Iterators, the .filter() Method

const randomNumbers = [375, 200, 3.14, 7, 13, 852];
const smallNumbers = randomNumbers.filter(i => {
  return i < 250;
});
console.log(smallNumbers); // Returns new array [200, 3.14, 7, 13]

const favoriteWords = ['nostalgia', 'hyperbole', 'fervent', 'esoteric', 'serene'];
const longFavoriteWords = favoriteWords.filter(i => {
  return i.length > 7;
});
console.log(longFavoriteWords); // Returns new array ['nostalgia', 'hyperbole', 'esoteric']

// Iterators, the .findIndex() Method

const animals = ['hippo', 'tiger', 'lion', 'seal', 'cheetah', 'monkey', 'salamander', 'elephant'];
const foundAnimal = animals.findIndex(i => {
  return i === 'elephant';
});
console.log(foundAnimal); // Returns the item index 7
const startsWithS = animals.findIndex(i => {
  return i[0] === 's';
});
console.log(startsWithS); // Returns the item index 3

// Iterators, the .reduce() Method

const newNumbers = [1, 3, 5, 7];
const newSum = newNumbers.reduce((accumulator, currentValue) => {
  console.log('The value of accumulator: ', accumulator);
  console.log('The value of currentValue: ', currentValue);
  return accumulator + currentValue;
},
10); // Initial value

console.log(newSum); // Prints 26.

// Reversed Array 

const reverseArray = arr => {
  let reversed = [];
  for ( let i = arr.length-1; i >= 0; i--) {
    reversed.push(arr[i]);
  }
  return reversed
};
const sentence = ['sense.','make', 'all', 'will', 'This'];
console.log(reverseArray(sentence)) 
// Should print ['This', 'will', 'all', 'make', 'sense.'];

// Print each string in the array

const greetAliens = aliens => {
  for (let i = 0; i < aliens.length; i++) {
    console.log(`Oh powerful ${aliens[i]}, we humans offer our unconditional surrender!`); 
  }
}
const aliens = ["Blorgous", "Glamyx", "Wegord", "SpaceKing"];
greetAliens(aliens);

// Returns a new array with each string prepended

const convertToBaby = animals => {
  const babyArray = [];
  for (let i = 0; i < animals.length; i++) {
    babyArray.push('baby ' + animals[i]);
  }
  return babyArray;
}
const animals = ['panda', 'turtle', 'giraffe', 'hippo', 'sloth', 'human'];
console.log(convertToBaby(animals)) 

// Decline everything && Accept everything

const veggies = ['broccoli', 'spinach', 'cauliflower', 'broccoflower'];
const politelyDecline = (veg) => {
      console.log('No ' + veg + ' please. I will have pizza with extra cheese.');
}
const declineEverything = arr => {
  arr.forEach(politelyDecline)
}
const acceptEverything = arr => {
  arr.forEach(e => {
    console.log(`Ok, I guess I will eat some ${e}.`)
  })
}
declineEverything(veggies);
acceptEverything(veggies);

// Square numbers

const numbers = [2, 7, 9, 171, 52, 33, 14]
const toSquare = num => num * num
const squareNums = arr => arr.map(toSquare)
console.log(squareNums(numbers));

// Return capitalized strings

const shoutGreetings = arr => {
  const newShoutGreetings = []
  for ( let i = 0; i < arr.length; i++) {
    newShoutGreetings.push(arr[i].toUpperCase() + '!')
  }
  return newShoutGreetings
}
const greetings = ['hello', 'hi', 'heya', 'oi', 'hey', 'yo'];
console.log(shoutGreetings(greetings))

// Sorted in descending order

const sortYears = arr => arr.sort((x,y) => y - x)
const years = [1970, 1999, 1951, 1982, 1963, 2011, 2018, 1922]
console.log(sortYears(years))

// Returns an array with the items that are present in both arrays

const justCoolStuff = (arr1, arr2) => arr1.filter(item => arr2.includes(item))
const coolStuff = ['gameboys', 'skateboards', 'backwards hats', 'fruit-by-the-foot', 'pogs', 'my room', 'temporary tattoos'];
const myStuff = [ 'rules', 'fruit-by-the-foot', 'wedgies', 'sweaters', 'skateboards', 'family-night', 'my room', 'braces', 'the information superhighway']; 
console.log(justCoolStuff(myStuff, coolStuff))

// returns a boolean value based on whether or not every item in the array pass the test

const isTheDinnerVegan = arr => {
  if (arr.every(i => i.source === 'plant')) {
    return true
  } else {
    return false
  }
}

const dinner = [{name: 'hamburger', source: 'meat'}, {name: 'cheese', source: 'dairy'}, {name: 'ketchup', source:'plant'}, {name: 'bun', source: 'plant'}, {name: 'dessert twinkies', source:'unknown'}];
console.log(isTheDinnerVegan(dinner))

// Sorts the array in ascending order based on the average number of teeth that species possesses (numTeeth) .

const speciesArray = [ {speciesName:'shark', numTeeth:50}, {speciesName:'dog', numTeeth:42}, {speciesName:'alligator', numTeeth:80}, {speciesName:'human', numTeeth:32}];

const sortSpeciesByTeeth = arr => arr.sort((objet1, objet2) => objet1.numTeeth > objet2.numTeeth)
console.log(sortSpeciesByTeeth(speciesArray))

// Returns the index of the item 

const findMyKeys = arr => {
  let llaves = arr.findIndex(item => item === 'keys')
  return llaves
}

const randomStuff = ['credit card', 'screwdriver', 'receipt', 'gum', 'keys', 'used gum', 'plastic spoon'];
console.log(findMyKeys(randomStuff))

// Takes a number as an argument and returns the factorial of the number.

const factorial = num => {
  if (num === 0) {
    return 1
  }
  return num * factorial(num - 1)
}
console.log(factorial(8))

// Search the string for the two occurrences of the character and return the length between them

const subLength = (str, char) => {
  let firstIndex = str.indexOf(char);
  let lastIndex = str.lastIndexOf(char);
  
  if (firstIndex === -1 || firstIndex === lastIndex) {
    return 0;
  }

  let count = 0;
  for (let i = 0; i < str.length; i++) {
    if (str[i] === char) {
      count++;
    }
  }

  if (count !== 2) {
    return 0;
  }

  return lastIndex - firstIndex + 1;

}

console.log(subLength('Saturday', 'a')); // returns 6
console.log(subLength('summer', 'm')); // returns 2
console.log(subLength('digitize', 'i')); // returns 0
console.log(subLength('cheesecake', 'k')); // returns 0

// Return a string with each item separated by a comma except the last two items

const groceries = list => {
  const items = list.map(obj => obj.item);
  if (items.length === 0) {
    return '';
  }
  if (items.length === 1) {
    return items[0];
  }
  if (items.length === 2) {
    return items.join(' and ');
  }

  return items.slice(0,-1).join(', ') + ' and ' + items[items.length - 1];
};

console.log(groceries( [{item: 'Carrots'}, {item: 'Hummus'}, {item: 'Pesto'}, {item: 'Rigatoni'}] ));


Build a drop-down list who do this: when item1 is selected, all divs with the class item1 change their css Propertie 'display:none', to 'display: block', when item2 is selected happens de the same, divs with class item2 changes css propertie from 'display: none' to 'display: block'. When the pages loads, all items should init with the propertie 'display:block'