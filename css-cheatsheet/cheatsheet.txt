
// Arithmetic Operators

Add: +
Subtract: -
Multiply: *
Divide: /
Remainder: %

// Properties

console.log('Hello'.length); // Prints 5

// Methods

console.log('hello'.toUpperCase()); // Prints 'HELLO'
console.log('Hey'.startsWith('H')); // Prints true

// Built-in Objects

console.log(Math.random()); // Prints a random number between 0 and 1
console.log(Math.floor(Math.random() * 50)); // Prints a random whole number between 0 and 50
Math.random() * 50; // To generate a random number between 0 and 50, we could multiply this result by 50
Math.floor(Math.random() * 50); // Takes a decimal number, and rounds down to the nearest whole number.

// Variable

var myName = 'Arya';
console.log(myName);

var is used in pre-ES6 versions of JavaScript. It is function scoped.
let is the preferred way to declare a variable when it can be reassigned. It is block scoped.
const is the preferred way to declare a variable with a constant value. It is also block scoped.

let newVariable; // Output undefined

let w = 4;
w += 1; // Can be written as w = w + 1

let x = 20;
x -= 5; // Can be written as x = x - 5
console.log(x); // Output: 15

let y = 50;
y *= 2; // Can be written as y = y * 2
console.log(y); // Output: 100

let z = 8;
z /= 2; // Can be written as z = z / 2
console.log(z); // Output: 4

// Increment and Decrement Operator

let a = 10;
a++;
console.log(a); // Output: 11

let b = 20;
b--;
console.log(b); // Output: 19

// String Concatenation with Variables

let myPet = 'armadillo';
console.log('I own a pet ' + myPet + '.'); // Output: 'I own a pet armadillo.'

// String Interpolation

const myPet = 'armadillo';
console.log(`I own a pet ${myPet}.`);
// Output: I own a pet armadillo.

// typeof operator

const unknown1 = 'foo';
console.log(typeof unknown1); // Output: string

const unknown2 = 10;
console.log(typeof unknown2); // Output: number

const unknown3 = true; 
console.log(typeof unknown3); // Output: boolean

let newVariable = 'Playing around with typeof.';
console.log(typeof newVariable); // Output: string
newVariable = 1;
console.log(typeof newVariable); // Output: number

// If...Else Statements

if (false) {
  console.log('The code in this block will not run.');
} else {
  console.log('But the code in this block will!');
}

// Comparison Operators

Less than: <
Greater than: >
Less than or equal to: <=
Greater than or equal to: >=
Is equal to: ===
Is not equal to: !==

10 < 12 // Evaluates to true
'apples' === 'oranges' // false

let hungerLevel = 3;
if (hungerLevel > 7) {
  console.log('Time to eat!');
} else {
  console.log('We can eat later!');
}

// Logical Operators

the 'and' operator (&&)
the 'or' operator (||)
the 'not' operator, otherwise known as the bang operator (!)

if (stopLight === 'green' && pedestrians === 0) {
  console.log('Go!');
} else {
  console.log('Stop');
}

let excited = true;
console.log(!excited); // Prints false
let sleepy = false;
console.log(!sleepy); // Prints true

// Truthy and Falsy

Falsy Values
0
Empty strings like "" or ''
null which represent when there is no value at all
undefined which represent when a declared variable lacks a value
NaN, or Not a Number

let myVariable = 'I Exist!';
if (myVariable) {
   console.log(myVariable)
} else {
   console.log('The variable does not exist.')
} // check to see if the variable has been assigned a value.

let numberOfApples = 0;
if (numberOfApples){
   console.log('Let us eat apples!');
} else {
   console.log('No apples left!');
} // Prints 'No apples left!'

// Truthy and Falsy Assignment

let username = '';
let defaultName;
if (username) { // Si username existe (truth), entonces
  defaultName = username;
} else { // Si username no existe, entonces
  defaultName = 'Stranger';
}
console.log(defaultName); // Prints: Stranger

let username = ''; // Como reducir lo anterior (short-circuit evaluation)
let defaultName = username || 'Stranger';
console.log(defaultName); // Prints: Stranger

let tool = 'marker'; // Si es un string vacÃ­o, regresara el valor 'pen'.
let writingUtensil = tool || 'pen';
console.log(`The ${writingUtensil} is mightier than the sword.`);

// Ternary Operator

let isNightTime = true;
if (isNightTime) {
  console.log('Turn on the lights!');
} else {
  console.log('Turn off the lights!');
}

let isNightTime = true;
isNightTime ? console.log('Turn on the lights!') : console.log('Turn off the lights!');

let favoritePhrase = 'Love That!';
favoritePhrase === 'Love That!' ? console.log('I love that!') : console.log("I don't love that!");

// Else If Statements

let stopLight = 'yellow';
if (stopLight === 'red') {
  console.log('Stop!');
} else if (stopLight === 'yellow') {
  console.log('Slow down.');
} else if (stopLight === 'green') {
  console.log('Go!');
} else {
  console.log('Caution, unknown!');
}

// The switch keyword

let groceryItem = 'papaya';
switch (groceryItem) {
  case 'tomato':
    console.log('Tomatoes are $0.49');
    break;
  case 'lime':
    console.log('Limes are $1.49');
    break;
  case 'papaya':
    console.log('Papayas are $1.29');
    break;
  default:
    console.log('Invalid item');
    break;
} // Prints 'Papayas are $1.29'

// Function Declarations and Calling

function greetInSpanish() {
  console.log('Buenas tardes');
}

greetInSpanish();

// Parameters and Arguments (Functions)

function sayThanks(name) {
  console.log('Thank you for your purchase '+ name + '! We appreciate your business.');
}

sayThanks('Cole');

// Default Parameters (Functions)

function greeting (name = 'stranger') {
  console.log(`Hello, ${name}!`)
}

greeting('Nick') // Output: Hello, Nick!
greeting() // Output: Hello, stranger!

// Return (Functions)

function monitorCount(rows, columns) {
  return rows * columns;
}

const numOfMonitors = monitorCount(5,4);

console.log(numOfMonitors);

// Helper Functions (the return value of a function inside another function.)

function monitorCount(rows, columns) {
  return rows * columns;
};

function costOfMonitors(rows, columns) {
  return monitorCount(rows, columns) * 200;
};

const totalCost = costOfMonitors(5,4);

console.log(totalCost);

// Function Expressions (A function expression is often stored in a variable in order to refer to it.)

const plantNeedsWater = function(day) {
  if (day === 'Wednesday') {
    return true;
  } else {
    return false;
  }
};

plantNeedsWater('Tuesday');

console.log(plantNeedsWater('Wednesday'));

// Arrow Functions

const plantNeedsWater = function(day) // Se reescribe como
const plantNeedsWater = (day) =>
{
  if (day === 'Wednesday') {
    return true;
  } else {
    return false;
  }
};

// Concise Body Arrow Functions

const functionName = () => {}; // Zero Parameters
const functionName = paramOne => {} // One Parameter
const functionName = (paramOne, paramTwo) => {} // Two or more Parameters

| const squareNum = (num) => {
|   return num * num;
| };
| // Function refactor
| const squareNum = num => num * num;


// Arrays

let newYearsResolutions = ['Keep a journal', 'Take a falconry class', 'Learn to juggle'];

let cities = ['New York', 'Berlin', 'Dubai'];
cities[0] // Accessing Elements

let groceryList = ['bread', 'tomatoes', 'milk'];
groceryList[1] = 'avocados'; // Update Elements

const objectives = ['Learn', 'Read', 'Run'];
console.log(objectives.length); // Number Of Items

const itemTracker = ['item 0', 'item 1', 'item 2'];
itemTracker.push('item 3', 'item 4'); // Add Items

const newItemTracker = ['item 0', 'item 1', 'item 2'];
const removed = newItemTracker.pop(); // Remove Last Item

const groceryList = ['juice', 'bananas', 'pasta'];
groceryList.shift(); // Remove First Item

const groceryList = ['juice', 'bananas', 'pasta'];
groceryList.unshift('popcorn'); // Add First Item

const groceryList = ['juice', 'bananas', 'pasta'];
groceryList.slice('1,2'); // Copy Items 'bananas', 'pasta'

const groceryList = ['juice', 'bananas', 'pasta'];
groceryList.indexOf('bananas'); // Find Item Index [1]

const groceryList = ['yo', 'quiero', 'pasta'];
groceryList.join(' '); // Output 'Yo quiero pasta'

Arrays can be declared with let or const. Arrays are mutable. A variable declared with const cannot be reassigned.

// Arrays and Functions

const flowers = ['peony', 'daffodil', 'marigold'];
function addFlower(arr) {
  arr.push('lily');
}
addFlower(flowers);
console.log(flowers); // Output: ['peony', 'daffodil', 'marigold', 'lily']

// Nested Arrays

const nestedArr = [[1], [2, 3]];

const nestedArr = [[1], [2, 3]];
console.log(nestedArr[1]); // Output: [2, 3]

const nestedArr = [[1], [2, 3]];
console.log(nestedArr[1]); // Output: [2, 3]
console.log(nestedArr[1][0]); // Output: 2

// Loops

for (let counter = 0; counter < 4; counter++){
  console.log(counter);
} // Output 0, 1, 2, 3.

for (let counter = 3; counter >= 0; counter--){
  console.log(counter);
} // Loop backwards. Output 3, 2, 1, 0.

// Looping through Arrays

const vacationSpots = ['Bali', 'Paris', 'Tulum'];

for (let i = 0; i < vacationSpots.length; i++) {
  console.log('I would love to visit ' + vacationSpots[i]);
} // Output (3 times): 'I would love to visit (each array item)'

// Nested Loops

const bobsFollowers = ['Pete', 'Pat', 'Pit', 'Pot'];
const tinasFollowers = ['Harry', 'Pit', 'Pot'];
const mutualFollowers = [];

for (let i = 0; i < bobsFollowers.length; i++) {
  for (let j = 0; j < tinasFollowers.length; j++) {
    if (bobsFollowers[i] === tinasFollowers[j]) {
      mutualFollowers.push(bobsFollowers[i]);
    }
  }
} // Compare the elements in two arrays

console.log(mutualFollowers); // Output 'pit', 'pot'

//  While Loops

let counterTwo = 1;
while (counterTwo < 4) {
  console.log(counterTwo);
  counterTwo++;
  } // Prints 1, 2, and 3

const cards = ['diamond', 'spade', 'heart', 'club'];
let currentCard;
while (currentCard !== 'spade') {
  currentCard = cards[Math.floor(Math.random() * 4)];
  console.log(currentCard);
} // Logs card item until 'spades' matches